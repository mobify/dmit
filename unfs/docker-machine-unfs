#!/usr/bin/env bash
#
# The MIT License (MIT)
# Copyright © 2015 Toni Van de Voorde <toni.vdv@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

set -o errexit

# BEGIN _functions

# @info:    Prints the ascii logo
asciiLogo ()
{
  echo
  echo
  echo '                       ##         .'
  echo '                 ## ## ##        ==            _   _ _   _ _____ ____'
  echo '              ## ## ## ## ##    ===           | | | | \ | |  ___/ ___|'
  echo '          /"""""""""""""""""\___/ ===         | | | |  \| | |_  \___ \'
  echo '     ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~  | \_/ | |\  |  _|  ___) |'
  echo '          \______ o           __/              \___/|_| \_|_|   |____/'
  echo '            \    \         __/'
  echo '             \____\_______/'
  echo
  echo
}

# @info:    Prints the usage
usage ()
{

  asciiLogo

  cat <<EOF
Usage: $0 <machine-name> [options]

Options:

  -n, --nfs-config       NFS configuration to use in exports file.
                          (default to '$prop_nfs_config')
  -s, --shared-folder    Folder to share
                          (default to '$default_shared_folder')
  -m, --mount-opts       NFS mount options
                          (default to '$prop_mount_options')
  -e, --exports          Exports file to use
                          (default to '$prop_exports')
  -p, --port             Port to use for NFS server
                          (default to random port)
  -f, --force            Force reconfiguration of nfs
                          (default to $prop_force_configuration_nfs)
  -r, --reboot           Reboot machine instead of restarting services
                          (default to $prop_reboot_machine)

Examples:

  $ docker-machine-unfs test

    > Configure the HOME folder with NFS for machine test

  $ docker-machine-unfs test --shared-folder=/Users --shared-folder=/var/www

    > Configures the /Users and /var/www folder with NFS

  $ docker-machine-unfs test --shared-folder=/var/www --nfs-config="ro"

    > Configure the /var/www folder with NFS and the options 'ro'

  $ docker-machine-unfs test --mount-opts="noacl,async,nolock,vers=3,udp,noatime,actimeo=1"

    > Configure the /User folder with NFS and specific mount options.

EOF
  exit 0
}

# @info:    Prints error messages
# @args:    error-message
echoError ()
{
  printf "\033[0;31mFAIL\n\n$1 \033[0m\n"
}

# @info:    Prints warning messages
# @args:    warning-message
echoWarn ()
{
  printf "\033[0;33m$1 \033[0m\n"
}

# @info:    Prints success messages
# @args:    success-message
echoSuccess ()
{
  printf "\033[0;32m$1 \033[0m\n"
}

# @info:    Prints check messages
# @args:    success-message
echoInfo ()
{
  printf "\033[1;34m[INFO] \033[0m$1"
}

# @info:    Prints property messages
# @args:    property-message
echoProperties ()
{
  printf "\t\033[0;35m- $1 \033[0m\n"
}

# @info:    Checks if a given property is set
# @return:  true, if variable is not set; else false
isPropertyNotSet()
{
  if [ -z ${1+x} ]; then return 0; else return 1; fi
}

# @info:    Sets the default properties
setPropDefaults()
{
  default_port_min=49152
  default_port_max=65535
  default_port_range=$((default_port_max-default_port_min))
  default_shared_folder="$HOME"
  prop_nfs_port="$((RANDOM%default_port_range+default_port_min))"
  prop_machine_name=
  prop_shared_folders=()
  prop_nfs_config="rw"
  prop_mount_options="nfsvers=3,port={{PORT}},mountport={{PORT}},udp,nolock,hard,intr"
  prop_exports="/tmp/{{MACHINE}}.exports"
  prop_force_configuration_nfs=false
  prop_reboot_machine=false
}

# @info:    Parses and validates the CLI arguments
parseCli()
{

  [ "$#" -ge 1 ] || usage

  prop_machine_name=$1

  for i in "${@:2}"
  do
    case $i in
      -s=*|--shared-folder=*)
        local shared_folder="${i#*=}"
        shift

        if [ ! -d "$shared_folder" ]; then
          echoError "Given shared folder '$shared_folder' does not exist!"
          exit 1
        fi

        prop_shared_folders+=($shared_folder)
      ;;

      -n=*|--nfs-config=*)
        prop_nfs_config="${i#*=}"
      ;;

      -m=*|--mount-opts=*)
        prop_mount_options="${i#*=}"
      ;;

      -e=*|--exports=*)
        prop_exports="${i#*=}"
      ;;

      -p=*|--port=*)
        prop_nfs_port="${i#*=}"
      ;;

      -f|--force)
        prop_force_configuration_nfs=true
        shift
      ;;

      -r|--reboot)
        prop_reboot_machine=true
        shift
      ;;

      *)
        echoError "Unknown argument '$i' given"
        echo #EMPTY
        usage
      ;;
    esac
  done
  prop_mount_options=${prop_mount_options//\{\{PORT\}\}/$prop_nfs_port}
  prop_exports=${prop_exports//\{\{MACHINE\}\}/$prop_machine_name}

  if [ ${#prop_shared_folders[@]} -eq 0 ]; then
    prop_shared_folders+=($default_shared_folder:$default_shared_folder)
  fi;

  echoInfo "Configuration:"

  echo #EMPTY
  echo #EMPTY

  echoProperties "Machine Name: $prop_machine_name"
  for shared_folder in "${prop_shared_folders[@]}"
  do
    if [[ "$shared_folder" != "*:*" ]]; then
      shared_folder="$shared_folder:$shared_folder"
    fi
    echoProperties "Shared Folder: ${shared_folder#*:}"
    echoProperties "Shared Mount: ${shared_folder%:*}"
  done

  echoProperties "Mount Options: $prop_mount_options"
  echoProperties "Force: $prop_force_configuration_nfs"

  echo #EMPTY
}

# @info:    Checks if the machine is present
# @args:    machine-name
# @return:  (none)
checkMachinePresence ()
{
  echoInfo "machine presence ... \t\t\t"

  if [ "" = "$(docker-machine ls | sed 1d | grep -w "$1")" ]; then
    echoError "Could not find the machine '$1'!"; exit 1;
  fi

  echoSuccess "OK"
}

# @info:    Checks if the machine is running
# @args:    machine-name
# @return:  (none)
checkMachineRunning ()
{
  echoInfo "machine running ... \t\t\t"

  machine_state=$(docker-machine ls | sed 1d | grep "^$1\s" | awk '{print $4}')

  if [ "Running" != "${machine_state}" ]; then
    echoError "The machine '$1' is not running but '${machine_state}'!";
    exit 1;
  fi

  echoSuccess "OK"
}

# @info:    Returns the driver used to create the machine
# @args:    machine-name
# @return:  The driver used to create the machine
getMachineDriver ()
{
  docker-machine ls | sed 1d | grep "^$1\s" | awk '{print $3}'
}

# @info:    Loads mandatory properties from the docker machine
lookupMandatoryProperties ()
{
  echoInfo "Lookup mandatory properties ... "

  prop_machine_ip=$(docker-machine ip $1)

  prop_machine_driver=$(getMachineDriver $1)

  if [ "$prop_machine_driver" = "vmwarefusion" ]; then
    prop_network_id="Shared"
    prop_nfshost_ip=$(ifconfig -m `route get 8.8.8.8 | awk '{if ($1 ~ /interface:/){print $2}}'` | awk 'sub(/inet /,""){print $1}')
    prop_machine_ip=$prop_nfshost_ip
    if [ "" = "${prop_nfshost_ip}" ]; then
      echoError "Could not find the vmware fusion net IP!"; exit 1
    fi
    local nfsd_line="nfs.server.mount.require_resv_port = 0"
    echoSuccess "\t\tOK"

    echoInfo "Check NFS config settings ... \n"
    if [ "$(grep -Fxq "$nfsd_line" /etc/nfs.conf)" == "0" ]; then
      echoInfo "/etc/nfs.conf is setup correctly!"
    else
      echoWarn "\n !!! Sudo will be necessary for editing /etc/nfs.conf !!!"
      # Backup /etc/nfs.conf file
      sudo cp /etc/nfs.conf /etc/nfs.conf.bak && \
      echo "nfs.server.mount.require_resv_port = 0" | \
        sudo tee /etc/nfs.conf > /dev/null
      echoWarn "\n !!! Backed up /etc/nfs.conf to /nfs.conf.bak !!!"
      echoWarn "\n !!! Added 'nfs.server.mount.require_resv_port = 0' to /etc/nfs.conf !!!"
    fi
    echoSuccess "\n\t\t\t\t\t\tOK"
    return
  fi

  if [ "$prop_machine_driver" = "xhyve" ]; then
    prop_network_id="Shared"
    prop_nfshost_ip=$(ifconfig -m `route get $prop_machine_ip | awk '{if ($1 ~ /interface:/){print $2}}'` | awk 'sub(/inet /,""){print $1}')
    if [ "" = "${prop_nfshost_ip}" ]; then
      echoError "Could not find the xhyve net IP!"; exit 1
    fi
    echoSuccess "\t\tOK"
    return
  fi

  if [ "$prop_machine_driver" = "parallels" ]; then
    prop_network_id="Shared"
    prop_nfshost_ip=$(prlsrvctl net info \
      "${prop_network_id}" | grep 'IPv4 address' | sed 's/.*: //')

    if [ "" = "${prop_nfshost_ip}" ]; then
      echoError "Could not find the parallels net IP!"; exit 1
    fi

    echoSuccess "\t\tOK"
    return
  fi

  if [ "$prop_machine_driver" != "virtualbox" ]; then
    echoError "Unsupported docker-machine driver: $prop_machine_driver"; exit 1
  fi

  prop_network_id=$(VBoxManage showvminfo $1 --machinereadable |
    grep hostonlyadapter | cut -d'"' -f2)
  if [ "" = "${prop_network_id}" ]; then
    echoError "Could not find the virtualbox net name!"; exit 1
  fi

  prop_nfshost_ip=$(VBoxManage list hostonlyifs |
    grep "${prop_network_id}" -A 3 | grep IPAddress |
    cut -d ':' -f2 | xargs);
  if [ "" = "${prop_nfshost_ip}" ]; then
    echoError "Could not find the virtualbox net IP!"; exit 1
  fi

  echoSuccess "\t\tOK"
}

# @info:    Configures the NFS
configureNFS()
{
  echoInfo "Configure NFS ... \t"

  if isPropertyNotSet $prop_machine_ip; then
    echoError "'prop_machine_ip' not set!"; exit 1;
  fi

  # Update the exports file and restart nfsd
  (
    for shared_folder in "${prop_shared_folders[@]}"
    do
      echo "${shared_folder#*:} $prop_machine_ip($prop_nfs_config)"$'\n'
    done
  ) >$prop_exports

  export PATH=$PATH:/usr/sbin:/usr/local/sbin/
  if unfsd -T -e $prop_exports; then
    PID_FILE=/tmp/$prop_machine_name-unfsd.pid
    NFS_PID=$(cat $PID_FILE 2>/dev/null || true)
    if [[ -n "$NFS_PID" ]]; then
      kill $NFS_PID
    fi
    nohup unfsd -s -u -p -d -l $prop_nfshost_ip -n $prop_nfs_port -m $prop_nfs_port -i $PID_FILE -e $prop_exports >/dev/null &
    echoSuccess "\t\tOK"
  else
    echoError "Invalid NFS exports file :("; exit 1
  fi
}

configureRancherOS()
{

  echoInfo "Configuring for RancherOS ... \t\t"
  if isPropertyNotSet $prop_machine_name; then
    echoError "'prop_machine_name' not set!"; exit 1;
  fi
  if isPropertyNotSet $prop_nfshost_ip; then
    echoError "'prop_nfshost_ip' not set!"; exit 1;
  fi

  local mountshdir=''
  for shared_folder in "${prop_shared_folders[@]}"
  do
    mountshdir+="sudo mkdir -p '${shared_folder%:*}'"$'\n'
  done

  local mountsh=''
  for shared_folder in "${prop_shared_folders[@]}"
  do
    mountsh+="timeout -t 3 mount -t nfs -o '$prop_mount_options' '$prop_nfshost_ip:${shared_folder#*:}' '${shared_folder%:*}'"$'\n'
  done

cloud_config_tmp_path="$(mktemp)"
cat << CLOUD_CONFIG > $cloud_config_tmp_path
#cloud-config
rancher:
  services_include:
    ubuntu-console: true

write_files:
  # /opt/rancher/bin/start.sh is executed on start before User Docker starts
  # /etc/rc.local is also executed on start but not guaranteed to be ran before User Docker
  - path: /opt/rancher/bin/start.sh
    permissions: "0755"
    owner: root
    content: |
      #!/bin/bash
      if ! dpkg -l | grep -q nfs-common; then
        apt-get update -qq && apt-get install -y nfs-common
      fi
      rpcbind
      $mountshdir
      $mountsh
CLOUD_CONFIG

     docker-machine scp $cloud_config_tmp_path $prop_machine_name:/tmp/nfs.sh >/dev/null 2>&1
     docker-machine ssh $prop_machine_name 'sudo ros config merge < /tmp/nfs.sh' >/dev/null 2>&1
     echoSuccess "OK"
}

# @info:    Configures the VirtualBox Docker Machine to mount nfs
configureBoot2Docker()
{
  # render bootlocal.sh and nfs/*mount.sh over to Docker Machine
  # (this will modify an existing /var/lib/boot2docker/bootlocal.sh)

  echoInfo "Configuring for Boot2Docker ... \t\t"

  if isPropertyNotSet $prop_machine_name; then
    echoError "'prop_machine_name' not set!"; exit 1;
  fi
  if isPropertyNotSet $prop_nfshost_ip; then
    echoError "'prop_nfshost_ip' not set!"; exit 1;
  fi

  local mountsh='#!/bin/sh'$'\n'
  for shared_folder in "${prop_shared_folders[@]}"
  do
    mountsh+="sudo mkdir -p '${shared_folder%:*}'"$'\n'
  done

  # shouldn't need to start nfs-client anymore...
  #mountsh+="sudo /usr/local/etc/init.d/nfs-client start"$'\n'

  for shared_folder in "${prop_shared_folders[@]}"
  do
    mountsh+="sudo timeout -t 3 mount -t nfs -o '$prop_mount_options' '$prop_nfshost_ip:${shared_folder#*:}' '${shared_folder%:*}'"$'\n'
  done

  local umountsh='#!/bin/sh'$'\n'

  for shared_folder in "${prop_shared_folders[@]}"
  do
    umountsh+="sudo timeout -t 3 umount -l -f '${shared_folder%:*}'"$'\n'
  done

  local mountsh_file="/var/lib/boot2docker/nfs/mount.sh"
  local umountsh_file="/var/lib/boot2docker/nfs/umount.sh"
  local bootlocalsh_file="/var/lib/boot2docker/bootlocal.sh"

  docker-machine ssh $prop_machine_name \
    "sudo mkdir -p '$(dirname $mountsh_file)/'; \
     echo \"$mountsh\" | sudo tee $mountsh_file; sudo chmod +x $mountsh_file; \
     \
     sudo mv -f $umountsh_file $umountsh_file.old; \
     sudo mkdir -p '$(dirname $umountsh_file)'; \
     echo \"$umountsh\" | sudo tee $umountsh_file; sudo chmod +x $umountsh_file; \
     \
     if [[ ! -f '$bootlocalsh_file' ]]; then \
       echo '#!/bin/sh' | sudo tee $bootlocalsh_file; \
     fi; \
     sudo chmod a+x $bootlocalsh_file; \
     sudo sed -n '/# docker-machine-unfs/!p' -i $bootlocalsh_file; \
     sudo sed '1 a\'$'\n''$mountsh_file # docker-machine-unfs' -i $bootlocalsh_file; \
     sync" >/dev/null 2>&1

  echoSuccess "OK"
}

# @info:    Restarts Docker Machine
restartDockerMachine()
{
  echoInfo "Restart Docker Machine ... \t\t"

  if isPropertyNotSet $prop_machine_name; then
    echoError "'prop_machine_name' not set!"; exit 1;
  fi

  docker-machine restart $prop_machine_name > /dev/null

  exit 1
  echoSuccess "OK"
}

# @info:    Restarts Docker Services
restartDockerServices()
{
  echoInfo "Restart Docker Services ... \t\t"

  if isPropertyNotSet $prop_machine_name; then
    echoError "'prop_machine_name' not set!"; exit 1;
  fi

  local umountsh_file="/var/lib/boot2docker/nfs/umount.sh.old"
  local mountsh_file="/var/lib/boot2docker/nfs/mount.sh"
  docker-machine ssh $prop_machine_name \
    "$umountsh_file; $mountsh_file; true" >/dev/null 2>&1

  echoSuccess "OK"
}

# @return:  'true', if NFS is mounted; else 'false'
isNFSMounted()
{
  for shared_folder in "${prop_shared_folders[@]}"
  do
    local nfs_mount=$(docker-machine ssh $prop_machine_name "sudo timeout -t 3 df" |
      grep "$prop_nfshost_ip:${shared_folder#*:}")
    if [ "" = "$nfs_mount" ]; then
      echo "false";
      return;
    fi
  done

  echo "true"
}

# @info:    Verifies that NFS is successfully mounted
verifyNFSMount()
{
  echoInfo "Verify NFS mount ... \t\t\t"

  local attempts=10

  while [ ! $attempts -eq 0 ]; do
    [ "$(isNFSMounted)" = "true" ] && break
    attempts=$(($attempts-1))
    sleep 1
  done

  if [ $attempts -eq 0 ]; then
    echoError "Cannot detect the NFS mount :("; exit 1
  fi

  echoSuccess "OK"
}

# @info:    Displays the finish message
showFinish()
{
  echo
  printf "\033[0;36m"
  echo "--------------------------------------------"
  echo
  echo " The docker-machine '$prop_machine_name'"
  echo " is now mounted with NFS!"
  echo
  echo " ENJOY high speed mounts :D"
  echo
  echo "--------------------------------------------"
  printf "\033[0m"
  echo
}

# END _functions

setPropDefaults

parseCli "$@"

checkMachinePresence $prop_machine_name
checkMachineRunning $prop_machine_name

lookupMandatoryProperties $prop_machine_name

if [ "$(isNFSMounted)" = "true" ] && [ "$prop_force_configuration_nfs" = false ]; then
    echoSuccess "\n NFS already mounted." ; showFinish ; exit 0
fi

echo #EMPTY LINE

echoProperties "Machine IP: $prop_machine_ip"
echoProperties "Network ID: $prop_network_id"
echoProperties "NFSHost IP: $prop_nfshost_ip"

echo #EMPTY LINE

configureNFS

# XXX
which_b2d_style_install=''

if docker-machine ssh $prop_machine_name sudo ros -v 2>/dev/null; then
  which_b2d_style_install='rancheros'
else
  which_b2d_style_install='boot2docker'
fi

case "$which_b2d_style_install" in
  rancheros)
    prop_reboot_machine=true
    configureRancherOS
    ;;
  boot2docker)
    configureBoot2Docker
    ;;
  *)
    echo "Unknown install type"
    exit 1
    ;;
esac

if $prop_reboot_machine; then
  restartDockerMachine
else
  restartDockerServices
fi

verifyNFSMount

showFinish
